# -*- coding: utf-8 -*-
"""arima.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IyAIaXcEclTLwja6-jBZvFh4KBAHmCCZ

모듈 import
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install pandas_datareader
!pip install pmdarima

import os

import pandas as pd
import pandas_datareader.data as pdr
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

import matplotlib.pyplot as plt
import matplotlib
plt.style.use('seaborn-whitegrid')

import statsmodels.api as sm
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
from pmdarima.arima import auto_arima

import seaborn as sns

plt.style.use('seaborn-whitegrid')
# %matplotlib inline

import itertools

# 2017-10-19 부터 5년간 삼성전자 주식 데이터
# 데이터를 읽어들인 뒤 날짜와 종가의 데이터만 남김

data = pd.read_csv('samsung.csv')
data['Date'] = pd.to_datetime(data['Date'])
data = data[['Date', 'Close']]
data = data.set_index('Date')
data

"""ARIMA 모델링

1. 데이터 전처리
"""

#원본 데이터
fig = data.plot()

# 시계열 분해

# 첫 번째 plot은 원본 데이터
# Trend: 상승과 하락이 있는 추세 변동
# Seasonal: 분기마다 반복되는 계절 변동
# resid: residual, 예측 불가능한 임의의 변동. 원래 데이터에서 추세, 순환, 계절성을 뺀 나머지를 의미한다.

decomposition = sm.tsa.seasonal_decompose(data['Close'], model='additive', period=1)
fig = decomposition.plot()
fig.set_size_inches(10,10)
plt.show()

"""2. 시범적으로 시행해 볼 만한 모델 찾기"""

# 훈련데이터와 테스트 데이터를 8:2 비율로 나눔

train_data, test_data = train_test_split(data, test_size=0.2, shuffle=False)

# 몇 차 차분이 최선일지 파악하기 위해 ndiffs 함수를 사용할 수 있다.

from pmdarima.arima import ndiffs
kpss_diffs = ndiffs(train_data, alpha=0.05, test='kpss', max_d=6)
adf_diffs = ndiffs(train_data, alpha=0.05, test='adf', max_d=6)
n_diffs = max(adf_diffs, kpss_diffs)

print(f"추정된 차수 d = {n_diffs}")

# ACF, PACF
# squeeze()는 차원이 1인 차원을 제거해 줌.

fig, ax = plt.subplots(1, 2, figsize=(20, 10))
sm.graphics.tsa.plot_acf(train_data.values.squeeze(), lags=30, ax=ax[0])
sm.graphics.tsa.plot_pacf(train_data.values.squeeze(), lags=30, ax=ax[1]);

# 원본 데이터에 1차 차분
# DataFrame.diff(periods=1, axis=0): 차분, 기본값은 1차
# 80%만 train_data로 사용했기 때문에 2021-10-18까지의 데이터만 존재

diff_train_data = train_data.copy()
diff_train_data = diff_train_data['Close'].diff()    # 종가에 대해 차분
diff_train_data = diff_train_data.dropna()           # 차분으로 인한 결측치 제거
print(train_data)
print(diff_train_data)

# 1차 차분을 적용한 데이터의 plot
# plt.subplot(nrows, ncols, index): 큰 틀에서 어느 위치에 세부 plot을 그릴지 결정

plt.figure(figsize=(12,8))

plt.subplot(2, 1, 1)
plt.plot(train_data['Close'])
plt.legend(['Raw Data'])

plt.subplot(2, 1, 2)
plt.plot(diff_train_data, color='orange')
plt.legend(['Differenced Data'])

plt.show()

# 1차 차분한 데이터의 ACF, PACF

fig, ax = plt.subplots(1, 2, figsize=(10,5))
sm.graphics.tsa.plot_acf(diff_train_data.values.squeeze(), lags=40, ax=ax[0])
sm.graphics.tsa.plot_pacf(diff_train_data.values.squeeze(), lags=40, ax=ax[1]);

"""3. 파라미터 추정"""

# AR, difference, MA에 임의의 값을 설정하여 모델 생성

model = ARIMA(train_data.values, order=(1,1,2))
model_fit = model.fit()
model_fit.summary()

"""4.1 모델이 괜찮은지 확인 - ARIMA"""

# 여러 조합의 p,d,q를 탐색

print('Examples of parameter combinations for Seasonal ARIMA...')
p = range(0,4)
d = range(1,3)
q = range(0,4)
pdq = list(itertools.product(p, d, q))

aic=[]
for i in pdq:
  model = ARIMA(train_data.values, order=(i))
  model_fit = model.fit()
  print(f'ARIMA: {i} >> AIC : {round(model_fit.aic,2)}')
  aic.append(round(model_fit.aic,2))

# 최적의 파라미터

optimal = [(pdq[i], j) for i, j in enumerate(aic) if j == min(aic)]
optimal

model_opt = ARIMA(train_data.values, order=optimal[0][0])
model_opt_fit = model_opt.fit()

model_opt_fit.summary()

model_opt_fit.plot_diagnostics(figsize=(16,8));

"""5.1 예측 모델로 사용 - ARIMA"""

# 결정 계수 확인

prediction = model_opt_fit.forecast(len(test_data))
predicted_value = prediction

'''arima.model.ARIMA에서는 forecast의 리턴형식이 달라서 확률 범위를 나타낼 수 없음.
predicted_ub = prediction[2][:,0]
predicted_lb = prediction[2][:,1]
'''

predict_index = list(test_data.index)
r2 = r2_score(test_data, predicted_value)
print(r2)

fig, ax = plt.subplots(figsize=(12, 6))
data.plot(ax=ax);
ax.vlines('2021-10-19', 0, 100000, linestyle='--', color='r', label='Start of Forecast');
ax.plot(predict_index, predicted_value, label = 'Prediction')
#ax.fill_between(predict_index, predicted_lb, predicted_ub, color='k', alpha=0.1, label='0.95 Prediction Interval')
ax.legend(loc='upper left')
plt.suptitle(f'ARIMA {optimal[0][0]} Prediction Results')
plt.show()

"""4.2 모델이 괜찮은지 확인 - SARIMA"""

# Parameter search

print('Examples of parameter combinations for Seasonal ARIMA...')
p = range(0, 2)
d = range(1, 2)
q = range(0, 3)
pdq = list(itertools.product(p, d, q))
seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]

aic = []
params = []
for i in pdq:
  for j in seasonal_pdq:
    try:
      model = SARIMAX(train_data.values, order=(i), seasonal_order=(j))
      model_fit = model.fit()
      print(f'SARIMA: {i}{j} >> AIC : {round(model_fit.aic, 2)}')
      aic.append(round(model_fit.aic, 2))
      params.append((i, j))
    except:
      continue

# Search optimal parameters

optimal = [(params[i], j) for i, j in enumerate(aic) if j == min(aic)]
optimal

model_opt = SARIMAX(train_data.values, order = optimal[0][0][0], seasonal_order = optimal[0][0][1])
model_opt_fit = model_opt.fit()

model_opt_fit.summary()

model_opt_fit.plot_diagnostics(figsize=(16,8));

"""5.2 예측모델로 사용 - SARIMA"""

prediction = model_opt_fit.get_forecast(len(test_data))
predicted_value = prediction.predicted_mean
predicted_ub = prediction.conf_int()[:,0]
predicted_lb = prediction.conf_int()[:,1]
predict_index = list(test_data.index)
r2 = r2_score(test_data, predicted_value)

fig, ax = plt.subplots(figsize=(12, 6))
data.plot(ax=ax);
ax.vlines('2021-10-19', 0, 120000, linestyle='--', color='r', label='Start of Forecast');
ax.plot(predict_index, predicted_value, label = 'Prediction')
ax.fill_between(predict_index, predicted_lb, predicted_ub, color='k', alpha=0.1, label='0.95 Prediction Interval')
ax.legend(loc='upper left')
plt.suptitle(f'SARIMA {optimal[0][0][0]}, {optimal[0][0][1]}')
plt.show()

"""4.3 모델이 괜찮은지 확인 - auto_arima(seasonal=False)"""

# 최적의 조합을 찾아 모델을 만듦.

auto_arima_model = auto_arima(train_data, start_p=1, start_q=1,max_p=3, max_q=3, m=12, seasonal=False, d=1, D=1, max_P=3, max_Q=3,
                              trace=True, error_action='ignore', suppress_warnings=True, stepwise=False)

auto_arima_model.summary()

auto_arima_model.plot_diagnostics(figsize=(16,8));

"""5.3 예측모델로 사용 - auto_arima(seasonal=False)"""

prediction = auto_arima_model.predict(len(test_data), return_conf_int=True)
predicted_value = prediction[0]
predicted_ub = prediction[1][:,0]
predicted_lb = prediction[1][:,1]
predict_index = list(test_data.index)
r2 = r2_score(test_data, predicted_value)
print(r2)

fig, ax = plt.subplots(figsize=(12, 6))
data.plot(ax=ax);
ax.vlines('2021-10-19', 0, 120000, linestyle='--', color='r', label='Start of Forecast');
ax.plot(predict_index, predicted_value, label = 'Prediction')
ax.fill_between(predict_index, predicted_lb, predicted_ub, color='k', alpha=0.1, label='0.95 Prediction Interval')
ax.legend(loc='upper left')
plt.suptitle(f'SARIMA {auto_arima_model.order},{auto_arima_model.seasonal_order}')
plt.show()

"""4.4 모델이 괜찮은지 확인 - auto_arima(seasonal=True)"""

# max_p, max_q, max_P, max_Q를 모두 1로 설정하고 최적의 조합을 찾아 모델을 만듦.

auto_arima_model = auto_arima(train_data, start_p=1, start_q=1,max_p=1, max_q=1, m=12,
                              seasonal=True, d=1, D=1, max_P=1, max_Q=2,trace=True,
                              error_action='ignore', suppress_warnings=True, stepwise=False)

auto_arima_model.summary()

auto_arima_model.plot_diagnostics(figsize=(16,8));

"""5.4 예측모델로 사용 - auto_arima(seasonal=True)"""

prediction = auto_arima_model.predict(len(test_data), return_conf_int=True)
predicted_value = prediction[0]
predicted_ub = prediction[1][:,0]
predicted_lb = prediction[1][:,1]
predict_index = list(test_data.index)
r2 = r2_score(test_data, predicted_value)
print(r2)

fig, ax = plt.subplots(figsize=(12, 6))
data.plot(ax=ax);
ax.vlines('2021-10-19', 0, 120000, linestyle='--', color='r', label='Start of Forecast');
ax.plot(predict_index, predicted_value, label = 'Prediction')
ax.fill_between(predict_index, predicted_lb, predicted_ub, color='k', alpha=0.1, label='0.95 Prediction Interval')
ax.legend(loc='upper left')
plt.suptitle(f'SARIMA {auto_arima_model.order},{auto_arima_model.seasonal_order}')
plt.show()